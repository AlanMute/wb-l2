/*
	Паттерн команда это поведенческий паттерн. Он превращает запросы в объекты, позвляя передовать их как аргументы
	при вызове методов.

	Если нам необходимо выполнить какое либо действие для разных объектов (например включить телевизор и включить чайник с помошью одного пульта)
	нам поможет паттерн команда.

	Она позволяет как бы разделить процесс на два слоя: интерфейс и бизнес логика.
	Паттерн Команда предлагает больше не отправлять такие вызовы напрямую. Вместо этого каждый вызов, отличающийся от других, следует завернуть
	в собственный класс с единственным методом, который и будет осуществлять вызов. Такие объекты называют командами.

	Плюсы:
		- Убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют.
 		- Позволяет реализовать простую отмену и повтор операций.
 		- Позволяет реализовать отложенный запуск операций.
 		- Позволяет собирать сложные команды из простых.
 		- Реализует принцип открытости/закрытости.
	Минусы
		- Усложняет код программы из-за введения множества дополнительных классов.

	Пример:
	У нас есть телевизор и чайник. Мы можем включать и выключать их одной кнопкой на пульте
*/

package pattern

import "fmt"

type Buttom struct { // собсна кнопка которая все может
	command Command
}

func (b *Buttom) press() { // при нажатии выполняет команду
	b.command.execute()
}

type Command interface {
	execute()
}

type OnCommand struct { // первая команда для включения устройсва
	device Device
}

type OffCommand struct { // второя команда для выключения
	device Device
}

func (c *OnCommand) execute() { // вызывает функцию включения у конкретного девайса
	c.device.on()
}

func (c *OffCommand) execute() { // вызывает функцию выключения у конкретного девайса
	c.device.off()
}

type Device interface {
	on()
	off()
}

type Tv struct {
	channels int
}

func (t *Tv) on() {
	fmt.Println("Включаем телевижн")
}

func (t *Tv) off() {
	fmt.Println("Выключаем телевижн")
}

type Light struct {
	//
}

func (l *Light) on() {
	fmt.Println("Включаем Лайгхт")
}

func (l *Light) off() {
	fmt.Println("Выключаем Лайгхт")
}
