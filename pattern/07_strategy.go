package pattern

import "fmt"

/*
	Стратегия — это поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов
	и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.

	Пусть есть навигатор в котором пользователи могут знать как добраться до какого либо места на машине.
	Позже нужно реализовать для пешеходов. Потом для велосипедистов и так далее.
	Что бы не нагромождать класс разными реализациями, можно заюзать паттерн стратегия.

	Паттерн предполагает, что создается отдельный класс (в нашем случаи RouteStategy) в котором можно будет выполнить тот или иной алгоритм.
	Но наш навигатор должен будет знать какой алгоритм ему следует использоавать. Это будет указывать сам клиент.

	Плюсы:
	- Горячая замена алгоритмов на лету.
	- Изолирует код и данные алгоритмов от остальных классов.
	- Уход от наследования к делегированию.
	- Реализует принцип открытости/закрытости.
	Минусы:
	- Усложняет программу за счёт дополнительных классов.
	- Клиент должен знать, в чём состоит разница между стратегиями, чтобы выбрать подходящую.

*/

type RouteStategy interface { // интерфейс стратегии
	Route()
}

type CarRoute struct { // Стратегия при использовании личного авто
	//
}

func (c *CarRoute) Route() {
	fmt.Println("Тут строится оптимальный маршрут при использовании вашего авто")
}

type HumanRoute struct { // Стратегия при использовании личного авто
	//
}

func (c *HumanRoute) Route() {
	fmt.Println("Тут строится оптимальный маршрут при использовании ваших ног")
}

type BikeRoute struct { // Стратегия при использовании личного авто
	//
}

func (c *BikeRoute) Route() {
	fmt.Println("Тут строится оптимальный маршрут при использовании велосипеда")
}

type Navigator struct { // Навигатор, который сможет
	Route RouteStategy
}

func (n *Navigator) SetRouteStrategy(r RouteStategy) {
	n.Route = r
}

func (n *Navigator) Run(a, b string) {
	n.Route.Route()
}

// func main() {
// 	n := &Navigator{}

// 	n.SetRouteStrategy(&HumanRoute{}) // Выставляю что я пешеход
// 	n.Run("A", "B")                   //Строим маршрут из А в Б с учетом того что я пешеход
// }
