package pattern

import "fmt"

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

/*
 Допустим есть некоторая проблема:
 Наш код работает с большим количеством объейктов некой библиотеки. И нам нужно самостоятельно инициализировать каждый из них
 следить за правильным порядком зависимостей и тд.

 Для того чтобы немного облегчить себе жизнь можно использовать паттерн «фасад», представляющий собой
 простой интерфейс для роботы со сложной подсистемой. Он может и не иметь всей функциональности этой подсистемы,
 но зато скрывает его сложность от клиентов.

Плюсы:
	- Упрощение использования сложных систем: Фасад предоставляет унифицированный интерфейс к сложной системе, что делает её использование более простым для клиентов.
	- Сокрытие деталей реализации: Позволяет скрыть сложность внутренней структуры системы, предоставляя клиентам только необходимые методы.
Минусы:
	- Ограничение гибкости: Фасад может скрывать часть функциональности, что может стать проблемой,
		если клиентам понадобится более гибкий или точечный доступ к функциям системы.
	- Фасад может превратиться в сложный объект, связанный со всеми классами программы, накапливая в себе излишнюю сложность или функциональную нагрузку.

В качестве примера предположим у нас есть автомобильная мультимедийная система, в котором можно поставить музыку, настроить gps а так же выводить текущую погоду.
*/

type Music struct {
	// какая-то сложная реализация
}

func (m *Music) active() {
	fmt.Println("Включаем музычку") // к примеру мы просто будем выводить все в консоль
}

type Gps struct {
	// какая-то сложная реализация
}

func (g *Gps) Setup() {
	fmt.Println("Настраиваем GPS") // к примеру мы просто будем выводить все в консоль
}

type Weather struct {
	// какая-то сложная реализация
}

func (g *Weather) Info() {
	fmt.Println("В москве сейчас ясно! Понятно!") // к примеру мы просто будем выводить все в консоль
}

// наш фасад
type Boombox struct {
	music   *Music
	gps     *Gps
	weather *Weather
}

func NewBoombox() *Boombox {
	return &Boombox{
		music:   &Music{},
		gps:     &Gps{},
		weather: &Weather{},
	}
}

func (b *Boombox) BoomboxOn() {
	b.music.active()
	b.gps.Setup()
	b.weather.Info()
}
